import streamlit as st
import random
import json
from collections import defaultdict
import gspread

st.header('Interactive image captioning annotation')
st.subheader('Instructions')
st.markdown('Given the following images and a caption generated by an AI model, generate a "reformulation" of the caption by writing a similar caption in which the errors from the original caption (if such exists), are fixed. If the model generated caption is too bad to fix, write a new caption.')

st.subheader('Examples')
#st.image('http://images.cocodataset.org/train2017/000000000025.jpg', width=350)
st.image('images/COCO_train2014_000000000025.jpg', width=350)
st.markdown('**Model generated caption:** An elephant eating from a tree top')
st.markdown('**Reformulation:** A giraffe eating from a tree top')
st.markdown('------------------')
# st.image('http://images.cocodataset.org/train2017/000000010948.jpg', width=350)
st.image('images/COCO_train2014_000000010948.jpg', width=350)
st.markdown('**Model generated caption:** A boy playing a card game')
st.markdown('**Reformulation:** A man and a woman playing a video game')
st.markdown('------------------')
# st.image('http://images.cocodataset.org/train2017/000000010728.jpg', width=350)
st.image('images/COCO_train2014_000000010728.jpg', width=350)
st.markdown('**Model generated caption:** A tennis player hitting the ball with a racket **[Caption too bad to fix]**')
st.markdown('**Reformulation:** A pizza sitting on a plate on a wooden table')

st.subheader('Annotation')

# First, we need a utility function to count how many annotations we have for each image;
# we'll use it later to find unannoated images
# This function assumes that state.ws is the google sheet worksheet which is already initialized
def create_image_to_count():
    image_id_list = state.ws.col_values(2)[1:]
    res = defaultdict(int)
    for image_id in image_id_list:
        res[int(image_id)] += 1
    return res

state = st.session_state

# Each new time someone enters the app, the state is re initialized. So we need to reload the worksheet and data
if 'ws' not in state:
    # Reload the worksheet
    # 1. First, credentials. To reproduce follow the instructions in https://docs.gspread.org/en/latest/oauth2.html,
    # in the "For Bots: Using Service Account" section
    credentials = {'type': 'service_account', 'project_id': 'interactive-image-captioning', 'private_key_id': '12035110982ce28b4c91e02e3c314fb7ba7009af', 'private_key': '-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC9uve5nFEq/ATM\nBIWH8ds1h/xNFC4eqcWYWkFgKr8Nb/BYJOnB4EAwxDe0QCJNGrEEouHNHJWG7W/2\n4OYjtCUdI0d9qxZx9hpIggA5O+aiBHf1iHZTVQlhZic3U/Dut92ryAauovQtbk43\nW7dTo/LhDeWjpsvwSnqBVzZ1tGLxLhVt/4mRECO0/auxYyv+Dq+caZa5IzQ5b4uz\nlKwp1cwrNeOHVPbuZ5DWhadyI/KDplenKXs1+fr91/ZIQEkWaxjcV8Zl6qDFTuQq\nhSVqS53X8hjUcrzRxqjrYEdNk/bGcT0naLLV0HSWoNXnDyw984IU86Nw4zag0nXT\ni34YXjPXAgMBAAECggEAA6imAyWMJjjSTL4SwZ1gj3a2hKxbt4/HZLX6RkyK2Vp8\n+SnxTfSW1XvMngZc8gjDNQZUCMM10oGGQ/y0D6/ZIBTmJOucAFDW8MxPlHCe3iWR\n6fCHzq3SuBMfHl0GVQ938eEbb2ku03OTSFQCwEYbZ3h4QQoTDRW/xydXOPzN1y8F\ngkTccQGGty2OZ8fSUKTZZbMYRYVrQulhJr/DZZtudhstZMLoT97NokX0DJ6PL/dT\n+Pn+cnkK1ri+fo2CIY38Rf7UXfDsURlzGJVmbIqTQJT97ekelW4r37NJ4kqypzvj\nFiZPIqUskx/ILTp2ZhWg+5P2wtAKvyFQD8L4mW5mMQKBgQDr8UOh7+HSo0irLBCF\nrF4dxZybpEO+P/t/grJbt7GfHmReuzVQtScYOliI/1YuImJJNO1bAcZCkKkYST0e\nTmGZnzbcooojLcnY1rbQ8zoKE7JRvPcFnacmuPDevkYGEzsGMjR56BPbi5FkxIB+\n3Ezuckl+VlKh4B4DQbut4FptiQKBgQDN3AFVkzkGfeDpLpfYo25cKCFPppByapEA\nPNo0w1rdfXGF9CI+cFYyo9BslIUZYmmdKltRTr7W/UaYLAcdlBMitWFxxmd69Dtz\nmm9Eqlce8/fTLoFxLF5AoRt0QBGvD4Ru55N/tviPBYfndrFa1Cm29UWwoSDYaJ1y\nrHWsLU2eXwKBgQDS5IUycutjzqV+stVV1lsNu3ufNvWCUUhokhcAmjH+6ziF4Eno\niPOX2VcXpTuP4xX9H3zlMrHW/9zVI2mo9CCTItfz4Kkehqf71Pf1zuJa7X4fR4t5\nDpDAsOBECMkoVvoUML3tFT7ip17fNjEws5NkMu10Ko6TuHK7MH8kDPxnGQKBgD0N\nzAOCV35aZRMjc3uX9Qo2CLMj1mFow7qLUbgmXFOmeb3dyy4ziQ0Z0p3xaow9yM8J\nGe5CaY0/rulA3ZdjLE2198GTs2se9mbx3aBC2PXgK5chithy7T1Dyu2udtAxzPhL\njE5riMp6PHVkmXMzy29szQ92qlQkqtWw2nGHOicHAoGBAMNPgiAhkfdMoidINmHZ\n4R3IqNVmMWCVhZj/wyy+eHAL1Oj0ZjLMTIKJHiHHxV3D0/irVOKZOMY2bJvk7QgA\nlLPR6hQZHAaMSc17AhpG8/qEp6gSRJKHGfXvJgPgtpn2Hl0c+BhLndWfAHFpJjOt\nKBjtLr/KH18j3C9ZexhuSxMC\n-----END PRIVATE KEY-----\n', 'client_email': 'interactive-image-captioning@interactive-image-captioning.iam.gserviceaccount.com', 'client_id': '116699025089117232662', 'auth_uri': 'https://accounts.google.com/o/oauth2/auth', 'token_uri': 'https://oauth2.googleapis.com/token', 'auth_provider_x509_cert_url': 'https://www.googleapis.com/oauth2/v1/certs', 'client_x509_cert_url': 'https://www.googleapis.com/robot/v1/metadata/x509/interactive-image-captioning%40interactive-image-captioning.iam.gserviceaccount.com'}
    gc = gspread.service_account_from_dict(credentials)
    # 2. Load the sheet
    sh = gc.open("annotation_pilot")
    # 3. Open the specific worksheet
    state.ws = sh.worksheet('Sheet1')

    # Load the data needs to be annotated
    data_file_name = 'data_example.json'
    with open(data_file_name, 'r') as fp:
        state.data = json.load(fp)

    # Find samples which were not annotated (if such exists)
    image_to_count = create_image_to_count()
    state.unvisited_samples = [x for x in state.data if image_to_count[x['image_id']] == 0]
    if len(state.unvisited_samples) > 0:
        state.current_sample = random.choice(state.unvisited_samples)

# Next, this is the function that will be called whenever a user finish an annotation, that is, presses enter
# in the annotation text box
def annotate():
    reformulation = state.ref_text_box
    state.ref_text_box = ''
    image_id = state.current_sample['image_id']

    # Update the google sheet
    # 1. Find in which row we need to put the new annotations
    next_row_ind = len(state.ws.col_values(1)) + 1
    # 2. Update the sheet
    state.ws.update('A' + str(next_row_ind), 'train')
    state.ws.update('B' + str(next_row_ind), str(image_id))
    state.ws.update('C' + str(next_row_ind), state.current_sample['caption'])
    state.ws.update('D' + str(next_row_ind), reformulation)

    # Search for samples which were not annotated again
    image_to_count = create_image_to_count()
    state.unvisited_samples = [x for x in state.data if image_to_count[x['image_id']] == 0]
    if len(state.unvisited_samples) > 0:
        state.current_sample = random.choice(state.unvisited_samples)

# If we have un annotated samples, present to the user. Otherwise, state that everything is annotated
if len(state.unvisited_samples) > 0:
    sample = state.current_sample

    image_name = 'images/COCO_train2014_' + str(sample['image_id']).zfill(12) + '.jpg'
    st.image(image_name, width=350)
    st.markdown('**Model generated caption:** ' + sample['caption'])
    st.text_input(label='**Reformulation:**', on_change=annotate, key='ref_text_box')

else:
    st.info("Everything annotated.")
